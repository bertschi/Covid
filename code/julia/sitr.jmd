---
title: "COVID-19 modeling"
author: "Nils Bertschinger"
date: "28.03.2020"
options:
  doctype: md2html
  out_path: ../../reports/sitr.html
---

```{julia}
using Plots
using DifferentialEquations
using Distributions
using Random
using DataFrames
using DataFramesMeta
using CSV
using Flux
using ForwardDiff

plotly()
Random.seed!(123);
```

# Epidemic modeling
## Towards explaining/estimating the delay effect

### The SIR model

The basic SIR model, assumes that an infection unfolds when
susceptible (S) individuals become infected (I) -- which in turn
infect further susceptible individuals. Finally, infected individuals
recover (R) (or die) and are no longer susceptible. In continuous
time, the dynamics can be described by the following system of
ordinary differential equations (ODEs):

$$
\begin{align*}
  \frac{dS}{dt} &= - \beta \frac{I_t}{N} S_t \\
  \frac{dI}{dt} &= \beta \frac{I_t}{N} S_t - \gamma I_t \\
  \frac{dR}{dt} &= \gamma I_t
\end{align*}
$$

where $N \equiv S_t + I_t + R_t$ is constant over time. Model
parameters are

* the infectivity $\beta$
* and the recovery rate $\gamma$.

In this model, the average time of infection is $\gamma^{-1}$ giving
rise to a *basic reproduction number* of $R_0 = \beta \gamma^{-1}$.

Using the fantastic differential equation suite from Julia, the model
is simulated as follows:

```{julia}
struct SIR
    β::Float64
    γ::Float64
end

function sirdxdt!(du, u, θ::SIR, t)
    S, I, R = u
    N = S + I + R
    du[1] = - θ.β * I / N * S
    du[2] = θ.β * I / N * S - θ.γ * I
    du[3] = θ.γ * I
end;
```

```{julia}
function plotsol(dxdt, u₀, T, θ)
    tspan = (0.0, T)
    ode = ODEProblem(dxdt, u₀, tspan, θ)
    sol = solve(ode, RK4())
    plot(sol)
end

R₀ = 2.5
τ = 5.0
θ = SIR(R₀ / τ, 1 / τ)
N = 1e6
u₀ = [N - 1, 1, 0]
T = 100
plotsol(sirdxdt!, u₀, T, θ)
```

The basic SIR model corresponds to the assumption that infection
durations are exponentially distributed. Obviously, this is a rather
unrealistic assumption as most infections have a duration that is
closely distributed around its mean value. Fortunately, Erlang/gamma
distributed durations can be achieved by dividing the infected
compartement into several sub-compartements.

```{julia}
struct ErlangSIR
    β::Float64
    γ::Float64
    k::Int64
end

function erlangsirdxdt!(du, u, θ::ErlangSIR, t)
    N = sum(u)
    S = u[1]
    I = sum(u[2:(end-1)])
    du[1] = - θ.β * I / N * S
    du[2] = θ.β * I / N * S - θ.k * θ.γ * u[2]
    for i in 2:θ.k
        du[i+1] = θ.k * θ.γ * u[i] - θ.k * θ.γ * u[i+1]
    end
    du[end] = θ.k * θ.γ * u[end-1]
end;
```

```{julia}
R₀ = 2.5
τ = 5.0
θ = ErlangSIR(R₀ / τ, 1 / τ, 4)
N = 1e6
u₀ = vcat(N - 1, 1, fill(0, θ.k - 1), 0)
T = 100
plotsol(erlangsirdxdt!, u₀, T, θ)
```

### The SITR model

Following [Peng et al.](https://arxiv.org/abs/2002.06563) we extend
the model in the following way:

* Infected individuals either recover unnoticed or are tested positive
  eventually.

* Positively tested individuals either recover or die.

In this fashion, the observed values are linked to the tested cases
only. Furthermore, the model should allow for non-exponential
distributions of stage durations in order to include delay effects. In
particular, reported deaths only occur some time after individuals
have been tested positively.

Finally, we define the SITR model as

$$
\begin{align*}
  \frac{dS}{dt} &= - \beta_I \frac{I_t}{N} S_t - \beta_T \frac{T_t}{N} S_t \\
  \frac{dI^n}{dt} &= \beta_I \frac{I_t}{N} S_t + \beta_T \frac{T_t}{N} S_t - \gamma_{IR} I^n_t - \gamma_2 I^n_t \\
  \frac{dR_1}{dt} &= \gamma_1 I^n_t \\
  \frac{dT^m_t}{dt} &= \gamma_2 I^n_t - \gamma_3 T^m_t - \gamma_4 T^m_t \\
  \frac{dD}{dt] &= \gamma_3 T^m_t \\
  \frac{dR}{dt} &= \gamma_4 T^m_t
\end{align*}
$$

where upper indices denote that the compartment is actually split into
$n$ and $m$ sub-compartments with suitably rescaled parameters as in
the Erlang-SIR model.

```{julia}
struct SITR
    βI::Function
    βT::Function
    γI
    ρR
    γT
    ρD
end

function sitrdxdt!(du, u, θ::SITR, t)
    N = sum(u[1:6])
    S, I, R₁, T, R₂, D, Ttot = u

    βI = θ.βI(t)
    βT = θ.βT(t)
    du[1] = - βI * I / N * S - βT * T / N * S
    du[2] = βI * I / N * S + βT * T / N * S - θ.γI * I
    du[3] = θ.ρR * θ.γI * I
    du[4] = (1 - θ.ρR) * θ.γI * I - θ.γT * T
    du[5] = (1 - θ.ρD) * θ.γT * T
    du[6] = θ.ρD * θ.γT * T
    ## Bookkeeping of total tested
    du[7] = (1 - θ.ρR) * θ.γI * I
end;
```

```{julia}
R₀ = 2.5
τ = 5.0
θ = SITR(t -> R₀ / τ, t -> R₀ / τ, 2 / τ, 0.0, 2 / τ, 0.1)
N = 1e6
u₀ = vcat(N - 1, 1, fill(0, 5))
T = 100
plotsol(sitrdxdt!, u₀, T, θ)
```

Try fitting with Flux

```{julia}
df = CSV.read("../../data/full_df_Mar_27.csv";
              missingstrings = ["NA"])
rename!(df, Symbol("Country/Region") => :Country)

df = @linq df |>
       by([:Country, :Date],
          Cases = sum(:Cases),
          Deaths = sum(:Deaths),
          Recovered = sum(:Recovered));
```

```{julia}
function NegBinom2(μ, ϕ)
    μ = max(zero(μ), μ)
    NegativeBinomial(ϕ, ϕ / (μ + ϕ))
end

function modelsim(u₀, θ, ϕ, T)
    tspan = (0.0, T - 1)
    ode = ODEProblem(sitrdxdt!, u₀, tspan, θ)
    solve(ode, RK4())
end

function loglik(cases, deaths, u₀, θ, ϕ)
    T = length(cases)
    sol = modelsim(u₀, θ, ϕ, T)
    x = sol(0:(T - 1))

    ll = 0.0
    for t in 1:(T-1)
        ll += logpdf(NegBinom2( x[7, t + 1] - x[7, t], ϕ.T ),
                     cases[t + 1] - cases[t])
        ll += logpdf(NegBinom2( x[6, t + 1] - x[6, t], ϕ.D ),
                     deaths[t + 1] - deaths[t])        
    end
    ll
end
```

```{julia}
function sigmoidal(x, low, high, β, τ)
    low + (high - low) / (1 + exp(- β * (x - τ)))
end

function fitdemo(df, N; opt = ADAM())
    ## Constrain some parameters, i.e. N is fixed and βT ≡ 0
    ## Instead, we assume that βI changes over time
    params = rand(Normal(), 4 + 8 + 2)

    function constrain(params)
        x = vcat(map(exp, params[1:4]),
                 df.Deaths[1],
                 df.Cases[1])
        u₀ = vcat(N - sum(x), x)
        βI(t) = sigmoidal(t,
                          Flux.σ(params[5]), Flux.σ(params[6]),
                          exp(params[7]), exp(params[8]))
        βT(t) = 0.0
        θ = map( (f, x) -> f(x),
                 [exp, Flux.σ, exp, Flux.σ],
                 params[9:12] )
        ϕ = (T = exp(params[13]), D = exp(params[14]))
        u₀, SITR(βI, βT, θ...), ϕ
    end
    function loss(params, cases, deaths)
        u₀, θ, ϕ = constrain(params)
        - loglik(cases, deaths, u₀, θ, ϕ)
    end

    cb = Flux.throttle(() -> (@show loss(params, df.Cases, df.Deaths)), 2)
    for n = 1:12500
        cb()
        if n % 100 == 0
            @show n
        end
        Flux.Optimise.update!(opt, params,
                              ForwardDiff.gradient(p -> loss(p, df.Cases, df.Deaths), params))
    end
    constrain(params)
end
```

```{julia}
pop = CSV.read("../../data/population.csv")
rename!(pop,
        Symbol("Country Name") => :Country,
        Symbol("Country Code") => :Code)
pop = @where(pop,
             :Year .== maximum(:Year))

plts = []
for country in ["Italy", "Germany", "China"]
    foo = @where(df, :Country .== country)
    tada = fitdemo(foo, @where(pop, :Country .== country).Value[1];
                   opt = RMSProp(1e-3))

    ode = ODEProblem(sitrdxdt!, tada[1], (0., 100), tada[2])
    sol = solve(ode, RK4())

    println(country)
    plt = plot(sol.t, log.(sol[7, :]))
    plot!(plt, sol.t, log.(sol[6, :]))
    plot!(plt, 1:nrow(foo), log.(foo.Cases);
          seriestype = :scatter)
    plot!(plt, 1:nrow(foo), log.(foo.Deaths);
          seriestype = :scatter)
    push!(plts, plt)
end

plot(plts...)
```

Finally, we try a Turing wrapper for the model. This should enable a
more complete investigation of estimation uncertainties.

```{julia}
using Turing

@model sitrmodel(c1, d1, Δc, Δd, N) = begin
    βI ~ truncated(Normal(0.0, 5.0), 0.0, Inf)
    βT = 0.0
    γI ~ truncated(Normal(0.0, 5.0), 0.0, Inf)
    ρR ~ Beta(1.0, 1.0)
    γT ~ truncated(Normal(0.0, 5.0), 0.0, Inf)
    ρD ~ Beta(1.0, 1.0)

    ϕT ~ truncated(Normal(0.0, 10.0), 0.0, Inf)
    ϕD ~ truncated(Normal(0.0, 10.0), 0.0, Inf)

    I ~ truncated(Cauchy(), 0.0, Inf)
    R₁ ~ truncated(Cauchy(), 0.0, Inf)
    T ~ truncated(Cauchy(), 0.0, Inf)
    R₂ ~ truncated(Cauchy(), 0.0, Inf)

    ## Compute likelihood
    try
        D = d1
        Ttot = c1
        u₀ = [N - (I + R₁ + T + R₂ + D - Ttot), I, R₁, T, R₂, D, Ttot]
        θ = SITR(t -> βI, t -> βT, γI, ρR, γT, ρD)
        ϕ = (T = ϕT, D = ϕD)
        T = length(Δc) + 1
        sol = modelsim(u₀, θ, ϕ, T)
        x = sol(0:(T - 1))
        for t in 1:(T - 1)
            Δc[t] ~ NegBinom2( x[7, t + 1] - x[7, t], ϕ.T )
            Δd[t] ~ NegBinom2( x[6, t + 1] - x[6, t], ϕ.D )
        end
    catch
        Inf
    end
end
```
